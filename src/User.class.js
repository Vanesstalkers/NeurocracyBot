import { BuildableClass } from "./Base.class.js";
//import Broadcast from "./userEvents/broadcast.js";
import Table from "./userEvents/table.js";
import Question from "./userEvents/question.js";
import { toCBD } from "./Lobby.class.js";
import skillLST from "./lst/skill.js";
import helpQuestionLST from "./lst/helpQuestion.js";
import { numberToEmoji } from "./utils.js";

export default class User extends BuildableClass {
  id;
  #textHandlerList = {};
  #menuReady = false;
  constructor(userData = {}) {
    super(...arguments);
    this.id = userData.id;
    this.telegram = userData.telegram;
    this.alertCount = parseInt(userData.data.alert_count || "0");
    this.skillList = userData.data.skillList;
    this.needConfigSkills = userData.data.needConfigSkills;
  }
  static async build({ userId, chatId, telegramData = {} } = {}) {
    const errorHandler = async function (err) {
      User.sendSystemErrorMsg({ err, userId, chatId });
      throw new Error(err);
    };

    const queryData = await DB.query(
      `
                SELECT u.id, u.data, u.telegram, count(a) alert_count
                FROM users u
                  LEFT JOIN user_alert a ON a.user_id = u.id AND a.delete_time IS NULL
                WHERE u.id = $1
                GROUP BY u.id
            `,
      [userId]
    ).catch(errorHandler);
    const user = queryData.rows[0] || {};
    if (!user.id) {
      user.data = this.getDefaultUserData();
      user.telegram = telegramData;
      const queryResult = await DB.query(
        `
                    INSERT INTO users (id, data, telegram, last_login)
                    VALUES ($1, $2, $3, NOW()::timestamp)
                    RETURNING id
                `,
        [userId, user.data, user.telegram]
      ).catch(errorHandler);
      user.id = queryResult.rows[0].id;
    } else {
      await DB.query(
        `
                    UPDATE users
                    SET telegram = $1, last_login = NOW()::timestamp
                    WHERE id = $2
                `,
        [telegramData, userId]
      ).catch(errorHandler);
    }
    return new User({ ...user, createdFromBuilder: true });
  }

  resetCurrentAction() {
    delete this.lastMsg;
    delete this.currentAction;
  }
  async setLastMsg({ msg, text, config } = {}) {
    if (config === true) {
      config = {
        lastMsgCheckErrorText: undefined, // —Ç—É—Ç –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
      };
    }
    if (config.saveAsLastConfirmMsg) {
      this.lastMsg.confirmMsgId = msg.message_id;
    } else {
      this.lastMsg = {
        id: msg.message_id,
        text,
        ...config,
      };
    }
  }
  async checkLastMsg({ msgId } = {}) {
    const activeEvent = !msgId && this.lastMsg?.id;
    const oldEvent =
      msgId &&
      this.lastMsg?.id &&
      this.lastMsg?.id !== msgId &&
      msgId !== this.lastMsg?.confirmMsgId &&
      !this.lastMsg?.childMsgIdList.includes(msgId);

    if (activeEvent || oldEvent) {
      await this.sendSimpleError({
        error:
          this.lastMsg?.lastMsgCheckErrorText ||
          (oldEvent
            ? "–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞"
            : "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ"),
      });
      return false;
    } else {
      return true;
    }
  }
  async sendSimpleError({ error }) {
    await BOT.sendMessage(
      this.simpleMsgWrapper({
        text:
          "<b>–û—à–∏–±–∫–∞</b>: " +
          error +
          (this.lastMsg?.id
            ? "\n<i>–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.</i>"
            : ""),
        replyId: this.lastMsg?.id,
      })
    );
  }
  async sendSystemErrorMsg({ err } = {}) {
    User.sendSystemErrorMsg({ err, userId: this.id, chatId: this.currentChat });
  }
  static async sendSystemErrorMsg({ err, userId, chatId } = {}) {
    const sorryText = `–£ –Ω–∞—Å —Ç—É—Ç —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å, –Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã —É–∂–µ –≤—Å–µ —á–∏–Ω—è—Ç. –ú–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–Ω–æ–≤–æ.`;
    const errText = `Error message: '${err?.message}'.`;

    await BOT.sendMessage(
      this.simpleMsgWrapper({
        userId,
        chatId,
        text: sorryText + " " + errText,
        entities: [
          { type: "spoiler", offset: sorryText.length, length: errText.length },
        ],
      })
    );
  }
  simpleMsgWrapper({ ...options } = {}) {
    return User.simpleMsgWrapper({
      userId: this.id,
      chatId: this.currentChat,
      ...options,
    });
  }
  static simpleMsgWrapper({ userId, chatId, ...options } = {}) {
    return {
      userId: userId || this.id,
      chatId: chatId || this.currentChat,
      ...options,
    };
  }
  menuItem(item) {
    if (item.actionHandler)
      this.#textHandlerList[item.text] = item.actionHandler;
    return { ...item, actionHandler: undefined };
  }
  menuReady(value) {
    if (value !== undefined) {
      this.#menuReady = value;
    } else {
      return this.#menuReady;
    }
  }
  getMenuHandler(handler) {
    return this.#textHandlerList[handler];
  }
  async handleMenuAction(handler) {
    if (!this.menuReady()) this.startMenuMarkup();
    const menuHandler = this.getMenuHandler(handler);
    if (menuHandler) {
      return await menuHandler.call(this);
    } else {
      return false;
    }
  }

  startMenuMarkup() {
    const menu = [
      [
        this.menuItem({
          text: "üèÜ –í–æ–ø—Ä–æ—Å",
          actionHandler: async function () {
            await this.newQuestionEvent();
          },
        }),
        this.menuItem({
          text: "üèÜ –û—Ü–µ–Ω–∫–∞",
          actionHandler: async function () {
            console.log("üèÜ –û—Ü–µ–Ω–∫–∞");
          },
        }),
      ],
      [
        this.menuItem({
          text: "üéì –ù–∞–≤—ã–∫–∏",
          web_app: {
            url: `${CONFIG.webapp.url}/?user_id=${this.id}&action=skillList`,
          },
        }),
        this.menuItem({
          text: this.alertCount > 0 ? `üîî (${this.alertCount})` : "üîï",
          web_app: {
            url: `${CONFIG.webapp.url}/?user_id=${this.id}&action=alertList`,
          },
        }),
        this.menuItem({
          text: "üõ†Ô∏è –ú–µ–Ω—é",
          actionHandler: async function () {
            console.log("üõ†Ô∏è –ú–µ–Ω—é");
          },
        }),
      ],
    ];
    this.menuReady(true);
    return menu;
  }
  static getDefaultUserData() {
    const skillList = {};
    for (const skillCode of Object.keys(skillLST)) {
      skillList[skillCode] = {
        value: parseFloat((Math.random() * 10).toFixed(1)),
        update: 0,
      };
    }
    return {
      skillList,
      needConfigSkills: { value: 30 },
    };
  }
  async startMsg({ msg } = {}) {
    await BOT.sendMessage(
      this.simpleMsgWrapper({
        text: `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, ${this.telegram.username}!`,
        keyboard: this.startMenuMarkup(),
      })
    );

    await BOT.sendMessage(this.createStartHelpMsg(), true);
  }
  createStartHelpMsg({ msgId, info = null } = {}) {
    let text =
      "–ß—Ç–æ –µ—â–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∫—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π? <u>C–µ–π—á–∞—Å –∏ –¥–∞–ª–µ–µ, –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∞, –≤—ã–±–∏—Ä–∞–π—Ç–µ –ø—É–Ω–∫—Ç—ã —Å–æ –∑–Ω–∞—á–∫–æ–º</u> ‚ÑπÔ∏è";
    if (info) text += "\n\n" + info;

    const inlineKeyboard = Object.entries(helpQuestionLST).map(
      ([code, lst]) => {
        return [
          { text: `‚ÑπÔ∏è ${lst.text}?`, callback_data: toCBD("helpStart", code) },
        ];
      }
    );
    inlineKeyboard.push([
      {
        text: "‚úîÔ∏è –ú–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º!",
        callback_data: toCBD("acceptConfig"),
      },
    ]);
    return this.simpleMsgWrapper({ msgId, text, inlineKeyboard });
  }
  async helpStart({ data: [questionCode] }) {
    const question = helpQuestionLST[questionCode];
    const info = `‚ÑπÔ∏è <b>${question.text}?</b>\n\n<i>${question.info}</i>`;
    await BOT.editMessageText(
      this.createStartHelpMsg({ msgId: this.lastMsg?.id, info })
    );
  }
  async acceptConfig() {
    this.resetCurrentAction();
    if (this.needConfigSkills.value) {
      await BOT.sendMessage(
        this.simpleMsgWrapper({
          text: "–û—Ç–ª–∏—á–Ω–æ, –¥–ª—è –≤–∞—Å –µ—Å—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π.",
          inlineKeyboard: [
            [
              {
                text: "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
                callback_data: toCBD("showSkills"),
              },
            ],
            [
              {
                text: "üéì –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–≤—ã–∫–∏",
                web_app: {
                  url: `${CONFIG.webapp.url}/?user_id=${this.id}&action=skillList`,
                },
              },
            ],
          ],
        })
      );
    } else {
      await this.sendSimpleAnswer({
        text: "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–≤—É—Ö –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.",
      });
    }
  }

  async newQuestionEvent() {
    if (await this.checkLastMsg()) {
      this.resetCurrentAction();
      this.currentAction = await Question.build({ parent: this });
    }
  }
  async newRateEvent() {
    if (await this.checkLastMsg()) {
      this.resetCurrentAction();
      // this.currentAction = await Rate.build({ parent: this });
    }
  }

  async help() {
    if (!this.currentAction) {
      await this.sendSimpleAnswer({
        text: "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å.",
      });
    } else {
      this.currentAction?.help();
    }
  }
  async sendSimpleAnswer({ text, btnQ = true, btnA = true }) {
    const inlineKeyboard = [];
    if (btnQ)
      inlineKeyboard.push([
        {
          text: "–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å",
          callback_data: toCBD("newQuestionEvent"),
        },
      ]);
    if (btnA)
      inlineKeyboard.push([
        {
          text: "–û—Ü–µ–Ω–∏—Ç—å —á—É–∂–æ–π –≤–æ–ø—Ä–æ—Å",
          callback_data: toCBD("newRateEvent"),
        },
      ]);
    await BOT.sendMessage(
      this.simpleMsgWrapper({
        text,
        inlineKeyboard,
      })
    );
  }

  async showSkills() {
    this.resetCurrentAction();
    const table = await Table.build({ parent: this });
    this.currentAction = table;
    table.setSimpleMsgWrapper(this.simpleMsgWrapper.bind(this));
    table.setLST(skillLST);
    table.setItemKeyboardBuilder(
      function ({ tableItem, code: skillCode, customAttributes }) {
        const skill = this.skillList[skillCode] || {};
        let rateStr = numberToEmoji((skill.value || 0).toFixed(1).toString());
        let updateString = skill.update
          ? skill.update.toFixed(1).toString()
          : " ";
        if (updateString[0] != "-" && updateString[0] != " ")
          updateString = "+" + updateString;
        updateString = numberToEmoji(updateString);

        let result;

        if (this.needConfigSkills.value || customAttributes.startRateUpdated) {
          result = [
            { text: rateStr, callback_data: toCBD("null") },
            { text: updateString, callback_data: toCBD("null") },
            (skill.value || 0) < 10
              ? {
                  text: "‚ûï",
                  callback_data: toCBD("setStartRate", skillCode, "+"),
                }
              : {
                  text: "‚ûñ",
                  callback_data: toCBD("setStartRate", skillCode, "-"),
                },
            tableItem.showInfo
              ? {
                  text: "üö´",
                  callback_data: toCBD("helpItem", skillCode, "hide"),
                }
              : {
                  text: "‚ÑπÔ∏è",
                  callback_data: toCBD("helpItem", skillCode, "show"),
                },
          ];
        } else {
          result = [
            { text: rateStr, callback_data: toCBD("null") },
            { text: updateString, callback_data: toCBD("null") },
            tableItem.showInfo
              ? {
                  text: "üö´",
                  callback_data: toCBD("helpItem", skillCode, "hide"),
                }
              : {
                  text: "‚ÑπÔ∏è",
                  callback_data: toCBD("helpItem", skillCode, "show"),
                },
          ];
        }
        return [result];
      }.bind(this)
    );
    table.setPaginationMsgTextBuilder(
      function () {
        return `–£–∫–∞–∂–∏—Ç–µ –≤ –∫–∞–∫–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏, –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —Å–≤–æ–∏–º–∏ —Å–∏–ª—å–Ω—ã–º–∏ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏.\n<b>–û—Å—Ç–∞–ª–æ—Å—å –æ—á–∫–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</b> ${numberToEmoji(
          this.needConfigSkills.value
        )}\n‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–π—Ç–µ –µ–≥–æ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.`;
      }.bind(this)
    );
    table.setHandler(
      "setStartRate",
      async function ({ msgId, data: [skillCode, type] }) {
        if (!this.needConfigSkills.value) return;
        if (!this.skillList[skillCode])
          this.skillList[skillCode] = { value: 0, update: 0 };
        if (type === "+") {
          this.skillList[skillCode].value = parseFloat((parseFloat(this.skillList[skillCode].value) + 5).toFixed(1));
          this.skillList[skillCode].update = parseFloat((parseFloat(this.skillList[skillCode].update) + 5).toFixed(1));
          this.needConfigSkills.value -= 5;
        } else {
          if (this.skillList[skillCode].update) {
            this.skillList[skillCode].value = parseFloat((parseFloat(this.skillList[skillCode].value) - 5).toFixed(1));
            this.skillList[skillCode].update = parseFloat((parseFloat(this.skillList[skillCode].update) - 5).toFixed(1));
            this.needConfigSkills.value += 5;
          }
        }
        await DB.query(
          `
            UPDATE users
            SET data = jsonb_set(data, '{skillList, ${skillCode}}', $1, true)
            WHERE id = $2;
        `,
          [this.skillList[skillCode], this.id]
        );
        await DB.query(
          `
            UPDATE users
            SET data = jsonb_set(data, '{needConfigSkills, value}', $1, true)
            WHERE id = $2;
        `,
          [this.needConfigSkills.value, this.id]
        );
        await BOT.editMessageText(
          this.currentAction.createItemMsg({
            msgId,
            code: skillCode,
            customAttributes: {
              startRateUpdated: true,
            },
          })
        );
        await BOT.editMessageText(
          this.currentAction.createPaginationMsg({ msgId: this.lastMsg?.id })
        );
      }.bind(this)
    );
    table.start();
  }
  // async newBroadcast() {
  //   // if (await this.lastMsgCheck()) {
  //   //   this.resetCurrentAction();
  //     this.currentAction = await Broadcast.build({ parent: this });
  //     this.currentAction.start();
  //   // }
  // }
}
