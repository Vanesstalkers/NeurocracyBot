import { Event } from "../Base.class.js";
import { toCBD } from "../Lobby.class.js";
import skillLST from "../lst/skill.js";
import rateLST from "../lst/rate.js";

export default class Rate extends Event {
  static claimCountLimit = 3;
  config = { stepByStepMode: false };
  constructor() {
    super(...arguments);
  }
  static async build({ parent: user } = {}) {
    const rate = new Rate({ parent: user, createdFromBuilder: true });
    await rate.init();
    return rate;
  }
  async help() {
    await BOT.sendMessage(
      this.getParent().simpleMsgWrapper({
        text: "–û—Ü–µ–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –∫ –∫–∞–∫–∏–º —Ç–µ–º–∞–º –æ–Ω –æ—Ç–Ω–æ—Å–∏—Ç—Å—è.",
      })
    );
  }
  async init() {
    const user = this.getParent();
    this.skillList = [];
    if (this.config.stepByStepMode) this.step = 0;

    const question = await DB.query(
      `
        SELECT
            q.id, q.data
        FROM 
            question q
            LEFT JOIN answer a 
                    ON a.question_id = q.id AND a.user_id = $1
        WHERE
                (q.user_id != $1 OR q.user_id = $1)
            AND q.delete_time IS NULL
            AND a.id IS NULL
        LIMIT 1
      `,
      [user.id]
    );
    this.questionId = question.rows[0]?.id;

    if (!this.questionId) {
      await user.sendSimpleAnswer({
        text: "–ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–∑–∂–µ. –û–¥–Ω–∞–∫–æ –≤—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
      });
      return;
    }

    const questionData = question.rows[0].data;
    for (const skill of questionData.skillList) {
      this.skillList.push({
        code: skill.code,
        text: "‚ùì " + skill.label,
        rate: false,
      });
    }

    if (this.config.stepByStepMode) {
      await BOT.sendMessage(
        this.createMsgBySteps({
          text: questionData.text,
          info: "‚ÄºÔ∏è –û—Ü–µ–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 5",
        }),
        { text: questionData.text }
      );
    } else {
      await BOT.sendMessage(
        this.createMsg({
          text: questionData.text,
          info: '‚ÑπÔ∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ü–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 5. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ñ–∞–ª–æ–±–∞".\n<b>–ù–∏–∂–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ñ–µ—Ä—ã, —É–∫–∞–∂–∏—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–π - –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ–Ω–∞ –∫ –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –Ω–µ—Ç.</b>',
        }),
        { text: questionData.text }
      );
      for (const skill of this.skillList) {
        const msg = await BOT.sendMessage(
          user.simpleMsgWrapper({
            text: skill.text,
            inlineKeyboard: this.createMsgSkillKeyboard({ skill }),
          }),
          { childMsg: true }
        );
        skill.msgId = msg.message_id;
      }
    }
  }
  createMsg({ text, error = null, info = null, reward = null } = {}) {
    const user = this.getParent();
    text = "<b>–í–æ–ø—Ä–æ—Å:</b> " + (user.lastMsg?.text || text);
    let inlineKeyboard = [
      Array(6)
        .fill()
        .map((i, j) => ({ text: j, ...toCBD("setQuestionRate", j) })),
      [
        { text: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", ...toCBD("save") },
        { text: "‚ö†Ô∏è –ñ–∞–ª–æ–±–∞", ...toCBD("claim") },
        this.showInfo
          ? { text: "üö´", ...toCBD("helpRateQuestion", "hide") }
          : { text: "‚ÑπÔ∏è –ü–æ–¥—Å–∫–∞–∑–∫–∞", ...toCBD("helpRateQuestion", "show") },
      ],
    ];

    // if (reward) {
    //   const rewardArray = getRewardArray({ rewardList: reward.data }) || [
    //     "<i>–æ—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã</i>",
    //   ];
    //   // if(rewardArray.length){
    //   text = reward.text + "\n" + rewardArray.join("\n") + "\n\n" + text;
    //   // }
    //   inlineKeyboard = [];
    // }

    text +=
      "\n\n<b>–û—Ü–µ–Ω–∫–∞ –≤–æ–ø—Ä–æ—Å–∞</b>: " +
      (!this.questionRate ? "‚ùì" : rateLST[this.questionRate]);

    const skills = [];
    for (const skill of this.skillList) {
      let label = skillLST[skill.code].label;
      if (skill.rate == false) {
        skills.push("‚ùì " + label);
      } else if (skill.rate === "+") {
        skills.push("‚úîÔ∏è " + label);
      } else {
        skills.push("‚úñÔ∏è <s>" + label + "</s>");
      }
    }
    if (skills.length)
      text += "\n<b>–°–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ñ–µ—Ä—ã:</b> " + skills.join(", ") + ".";
    if (info) text += "\n\n" + info;
    if (error) text += "\n\n" + this.stringifyError.call(this, { error });
    return user.simpleMsgWrapper({
      msgId: user.lastMsg?.id,
      text,
      inlineKeyboard,
    });
  }
  createMsgBySteps({ text, error = null, info = null } = {}) {
    const user = this.getParent();
    text = "<b>–í–æ–ø—Ä–æ—Å:</b> " + (user.lastMsg?.text || text);
    text +=
      "\n\n<b>–û—Ü–µ–Ω–∫–∞ –≤–æ–ø—Ä–æ—Å–∞</b>: " +
      (!this.questionRate ? "‚ùì" : rateLST[this.questionRate]);
    const skills = [];
    for (const skill of this.skillList) {
      let label = skillLST[skill.code].label;
      if (skill.rate == false) {
        skills.push("‚ùì " + label);
      } else if (skill.rate === "+") {
        skills.push("‚úîÔ∏è " + label);
      } else {
        skills.push("‚úñÔ∏è <s>" + label + "</s>");
      }
    }
    if (skills.length)
      text += "\n<b>–°–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ñ–µ—Ä—ã:</b> " + skills.join(", ") + ".";
    if (error) text += "\n\n" + this.stringifyError.call(this, { error });

    let inlineKeyboard = [];
    if (this.step === 0) {
      inlineKeyboard = inlineKeyboard.concat([
        Array(6)
          .fill()
          .map((i, j) => ({ text: j, ...toCBD("setQuestionRate", j) })),
        [
          { text: "‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É", ...toCBD("claim") },
          this.showInfo
            ? { text: "üö´", ...toCBD("helpRateQuestion", "hide") }
            : { text: "‚ÑπÔ∏è –ü–æ–¥—Å–∫–∞–∑–∫–∞", ...toCBD("helpRateQuestion", "show") },
        ],
      ]);
    } else {
      const skill = this.skillList[this.step - 1];
      if (skill) {
        text += `\n\n‚ÄºÔ∏è –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ: <b>${skill.text}</b>`;
        inlineKeyboard = this.createMsgSkillKeyboard({ skill });
      } else {
        text += `\n\n‚úîÔ∏è –°–ø–∞—Å–∏–±–æ, –≤—Å–µ —É–¥–∞–ª–æ—Å—å! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏.`;
        inlineKeyboard = [
          [
            { text: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", ...toCBD("save") },
            { text: "–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫–∏", ...toCBD("reset") },
          ],
        ];
      }
    }

    if (info) text += "\n\n" + info;

    return user.simpleMsgWrapper({
      msgId: user.lastMsg?.id,
      text,
      inlineKeyboard,
    });
  }
  createMsgSkillKeyboard({ skill }) {
    return [
      [
        { text: "–û—Ç–Ω–æ—Å–∏—Ç—Å—è", ...toCBD("setSkillRate", skill.code, "+") },
        { text: "–ù–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è", ...toCBD("setSkillRate", skill.code, "-") },
        skill.showInfo
          ? { text: "üö´", ...toCBD("helpSkill", skill.code, "hide") }
          : { text: "‚ÑπÔ∏è –ü–æ–¥—Å–∫–∞–∑–∫–∞", ...toCBD("helpSkill", skill.code, "show") },
      ],
    ];
  }
  async setQuestionRate({ data: [rate] }) {
    this.questionRate = rate;
    if (this.config.stepByStepMode) {
      this.step += 1;
      await BOT.editMessageText(this.createMsgBySteps());
    } else {
      await BOT.editMessageText(this.createMsg());
    }
  }
  async setSkillRate({ data: [skillCode, rate] }) {
    const skill = this.skillList?.find((skill) => skill.code === skillCode);

    if (skill.rate !== rate) skill.rate = rate;
    else return;

    let text = skillLST[skill.code].label;
    if (rate === "+") {
      text = "‚úîÔ∏è <b>" + text + "</b>";
    } else {
      text = "‚úñÔ∏è <s>" + text + "</s>";
    }
    if (this.config.stepByStepMode) {
      this.step += 1;
      await BOT.editMessageText(this.createMsgBySteps());
    } else {
      await BOT.editMessageText(
        this.getParent().simpleMsgWrapper({
          msgId: skill.msgId,
          text,
          inlineKeyboard: this.createMsgSkillKeyboard({ skill }),
        })
      );
      await BOT.editMessageText(this.createMsg());
      skill.text = text;
    }
  }
  async helpRateQuestion({ data: [toggleType] } = {}) {
    this.showInfo = toggleType === "show" ? true : false;
    const info = !this.showInfo
      ? ""
      : `‚ÄºÔ∏è <i><b>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ—Ü–µ–Ω–∫—É:</b> ${Object.values(
          rateLST
        )
          .map((rate) => `\n${rate}`)
          .join(";")}.</i>`;
    await BOT.editMessageText(
      this.config.stepByStepMode
        ? this.createMsgBySteps({ info })
        : this.createMsg({ info })
    );
  }
  async helpSkill({ data: [skillCode, toggleType] }) {
    const skill = this.skillList?.find((skill) => skill.code === skillCode);
    skill.showInfo = toggleType === "show" ? true : false;
    await BOT.editMessageText(
      this.config.stepByStepMode
        ? this.createMsgBySteps({
            info: !skill.showInfo
              ? ""
              : `‚ÑπÔ∏è <i>C—Ñ–µ—Ä–∞ "${
                  skillLST[skill.code].label
                }" –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è: <u>${skillLST[skill.code].info}</u></i>`,
          })
        : this.getParent().simpleMsgWrapper({
            msgId: skill.msgId,
            text:
              skill.text +
              (!skill.showInfo
                ? ""
                : `\n‚ÑπÔ∏è <i><u>${skillLST[skill.code].info}</u></i>`),
            inlineKeyboard: this.createMsgSkillKeyboard({ skill }),
          })
    );
  }
  async reset() {
    delete this.questionRate;
    for (const skill of this.skillList) {
      skill.rate = false;
    }
    this.step = 0;
    await BOT.editMessageText(
      this.createMsgBySteps({ info: "‚ÄºÔ∏è –û—Ü–µ–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 5" })
    );
  }
  async claim() {
    await BOT.sendMessage(
      this.getParent().simpleMsgWrapper({
        text: "‚ö†Ô∏è–ñ–∞–ª–æ–±–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞—Ä—É—à–∞–µ—Ç –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª:\n- —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–æ–ø—Ä–æ—Å–æ–º;\n- —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É;\n- —Ç–µ–∫—Å—Ç –Ω–∞—Ä—É—à–∞–µ—Ç –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§.\n<b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª?</b>",
        inlineKeyboard: [
          [
            { text: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", ...toCBD("claimAccept") },
            { text: "–û—Ç–º–µ–Ω–∏—Ç—å", ...toCBD("claimCancel") },
          ],
        ],
      }),
      { saveAsLastConfirmMsg: true }
    );
  }
  async claimAccept() {
    const user = this.getParent();
    const question = await DB.query(
      `
        SELECT data -> 'claimCount' count
        FROM question
        WHERE id = $1
      `,
      [this.questionId]
    );
    const claimCount = question.rows[0]?.count || 0;

    if (claimCount < Rate.claimCountLimit) {
      await DB.query(
        `
          UPDATE question
          SET data = jsonb_set(data, '{claimCount}', $1, true)
          WHERE id = $2
        `,
        [claimCount + 1, this.questionId]
      );
    } else {
      await DB.query(
        `
          UPDATE question
          SET delete_time = NOW()::timestamp
          WHERE id = $1
        `,
        [this.questionId]
      );
    }
    await DB.query(
      `
        INSERT INTO answer
            (user_id, question_id, data, add_time, msg_id, chat_id)
        VALUES
            ($1, $2, $3, NOW()::timestamp, $4, $5)
      `,
      [
        user.id,
        this.questionId,
        { claim: true },
        user.lastMsg.id,
        user.currentChat,
      ]
    );

    await user.sendSimpleAnswer({
      text: "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–º–æ—â—å –≤ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –≤–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.",
    });
    user.resetCurrentAction();
  }
  async claimCancel() {
    const user = this.getParent();
    await BOT.deleteMessage(
      user.simpleMsgWrapper({ msgId: user.lastMsg.confirmMsgId })
    );
  }
  async save() {
    let error = false;
    if (
      !this.questionRate ||
      this.skillList.filter((skill) => skill.rate === false).length
    ) {
      error = `–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤—Å–µ —Å—Ñ–µ—Ä—ã.`;
    }
    const user = this.getParent();
    if (error) {
      if (await BOT.editMessageText(this.createMsg({ error }))) {
        await user.sendSimpleError({ error });
      }
    } else {
      await DB.query({
        text: `
          INSERT INTO answer
              (user_id, question_id, data, add_time, msg_id, chat_id)
          VALUES
              ($1, $2, $3, NOW()::timestamp, $4, $5);
        `,
        values: [
          user.id,
          this.questionId,
          { rate: this.questionRate, skills: this.skillList },
          user.lastMsg?.id,
          user.currentChat,
        ],
      }).catch(async function (err) {
        await user.sendSystemErrorMsg({ err });
        throw new Error(err);
      });

      const queryResult = await DB.query({
        text: `
          UPDATE question 
          SET data = data || jsonb_build_object(
              'answerCount', (COALESCE(data->>'answerCount','0')::int + 1)::text::jsonb,
              'rateCount', (COALESCE(data->>'rateCount','0')::int + 1)::text::jsonb
          )
          WHERE id = $1 RETURNING data->>'answerCount' count;
        `,
        values: [this.rateQuestionId],
      }).catch(async function (err) {
        await user.sendSystemErrorMsg({ err });
        throw new Error(err);
      });

      await user.sendSimpleAnswer({ text: "–û—Ü–µ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã." });
      user.resetCurrentAction();

      const answerCount = parseInt(queryResult.rows[0]?.count);
      if (answerCount > 0) {
        const queryResult = await DB.query({
          text: `
            (
                SELECT
                    'question' as type, q.data, u.id user_id, u.data user_data, q.msg_id, q.chat_id
                FROM
                    question q
                    LEFT JOIN users u 
                            ON u.id = q.user_id
                WHERE q.id = $1
            ) UNION ALL (
                SELECT
                'answer' as type, a.data, u.id user_id, u.data user_data, a.msg_id, a.chat_id
                FROM
                    question q
                    LEFT JOIN answer a
                            ON a.question_id = q.id AND a.delete_time IS NULL
                    LEFT JOIN users u
                            ON u.id = a.user_id
                WHERE q.id = $1
            )
          `,
          values: [this.questionId],
        });
        const questionList = [];
        const userList = [];
        const answerList = [];

        for (const item of queryResult.rows) {
          userList.push({
            user_id: item.user_id,
            skillList: item.user_data.skillList,
          });
          if (item.type === "question") {
            questionList.push({
              user_id: item.user_id,
              msg_id: item.msg_id,
              chat_id: item.chat_id,
              usedSkillList: item.data.usedSkillList || [],
              text: item.data.text,
            });
          } else {
            answerList.push({
              user_id: item.user_id,
              msg_id: item.msg_id,
              chat_id: item.chat_id,
              rate: item.data.rate,
              skills: item.data.skills || [],
            });
          }
        }

        // this.processQuestionRates({
        //   question: questionList[0],
        //   answerList,
        //   userList,
        // });
      }
    }
  }
}
